package ru.espepe.bubuka.player.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import ru.espepe.bubuka.player.dao.Play;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAY.
*/
public class PlayDao extends AbstractDao<Play, Long> {

    public static final String TABLENAME = "PLAY";

    /**
     * Properties of entity Play.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Volume = new Property(2, Integer.class, "volume", false, "VOLUME");
        public final static Property Time = new Property(3, Integer.class, "time", false, "TIME");
        public final static Property Font = new Property(4, String.class, "font", false, "FONT");
        public final static Property Fontnew = new Property(5, String.class, "fontnew", false, "FONTNEW");
        public final static Property Anim = new Property(6, Boolean.class, "anim", false, "ANIM");
        public final static Property Period = new Property(7, Integer.class, "period", false, "PERIOD");
        public final static Property Timelist_id = new Property(8, Long.class, "timelist_id", false, "TIMELIST_ID");
        public final static Property Block_id = new Property(9, Long.class, "block_id", false, "BLOCK_ID");
    };

    private DaoSession daoSession;

    private Query<Play> timelist_PlayListQuery;
    private Query<Play> block_PlayListQuery;

    public PlayDao(DaoConfig config) {
        super(config);
    }
    
    public PlayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'VOLUME' INTEGER," + // 2: volume
                "'TIME' INTEGER," + // 3: time
                "'FONT' TEXT," + // 4: font
                "'FONTNEW' TEXT," + // 5: fontnew
                "'ANIM' INTEGER," + // 6: anim
                "'PERIOD' INTEGER," + // 7: period
                "'TIMELIST_ID' INTEGER," + // 8: timelist_id
                "'BLOCK_ID' INTEGER);"); // 9: block_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Play entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer volume = entity.getVolume();
        if (volume != null) {
            stmt.bindLong(3, volume);
        }
 
        Integer time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String font = entity.getFont();
        if (font != null) {
            stmt.bindString(5, font);
        }
 
        String fontnew = entity.getFontnew();
        if (fontnew != null) {
            stmt.bindString(6, fontnew);
        }
 
        Boolean anim = entity.getAnim();
        if (anim != null) {
            stmt.bindLong(7, anim ? 1l: 0l);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(8, period);
        }
 
        Long timelist_id = entity.getTimelist_id();
        if (timelist_id != null) {
            stmt.bindLong(9, timelist_id);
        }
 
        Long block_id = entity.getBlock_id();
        if (block_id != null) {
            stmt.bindLong(10, block_id);
        }
    }

    @Override
    protected void attachEntity(Play entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Play readEntity(Cursor cursor, int offset) {
        Play entity = new Play( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // volume
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // font
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fontnew
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // anim
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // period
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // timelist_id
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // block_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Play entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVolume(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFont(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFontnew(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnim(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setPeriod(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimelist_id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setBlock_id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Play entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Play entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "playList" to-many relationship of Timelist. */
    public List<Play> _queryTimelist_PlayList(Long timelist_id) {
        synchronized (this) {
            if (timelist_PlayListQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Timelist_id.eq(null));
                timelist_PlayListQuery = queryBuilder.build();
            }
        }
        Query<Play> query = timelist_PlayListQuery.forCurrentThread();
        query.setParameter(0, timelist_id);
        return query.list();
    }

    /** Internal query to resolve the "playList" to-many relationship of Block. */
    public List<Play> _queryBlock_PlayList(Long block_id) {
        synchronized (this) {
            if (block_PlayListQuery == null) {
                QueryBuilder<Play> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Block_id.eq(null));
                block_PlayListQuery = queryBuilder.build();
            }
        }
        Query<Play> query = block_PlayListQuery.forCurrentThread();
        query.setParameter(0, block_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTimelistDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBlockDao().getAllColumns());
            builder.append(" FROM PLAY T");
            builder.append(" LEFT JOIN TIMELIST T0 ON T.'TIMELIST_ID'=T0.'_id'");
            builder.append(" LEFT JOIN BLOCK T1 ON T.'BLOCK_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Play loadCurrentDeep(Cursor cursor, boolean lock) {
        Play entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Timelist timelist = loadCurrentOther(daoSession.getTimelistDao(), cursor, offset);
        entity.setTimelist(timelist);
        offset += daoSession.getTimelistDao().getAllColumns().length;

        Block block = loadCurrentOther(daoSession.getBlockDao(), cursor, offset);
        entity.setBlock(block);

        return entity;    
    }

    public Play loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Play> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Play> list = new ArrayList<Play>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Play> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Play> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
